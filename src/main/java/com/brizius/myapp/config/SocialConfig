package com.brizius.myapp.config;

import javax.inject.Inject;
import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;

import org.springframework.core.env.Environment;

import org.springframework.scheduling.annotation.EnableAsync;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.encrypt.Encryptors;

import org.springframework.social.UserIdSource;
import org.springframework.social.config.annotation.ConnectionFactoryConfigurer;
import org.springframework.social.config.annotation.EnableSocial;
import org.springframework.social.config.annotation.SocialConfigurerAdapter;
import org.springframework.social.connect.Connection;
import org.springframework.social.connect.ConnectionFactoryLocator;
import org.springframework.social.connect.ConnectionRepository;
import org.springframework.social.connect.UsersConnectionRepository;
import org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository;
import org.springframework.social.connect.web.ConnectController;
import org.springframework.social.connect.web.ReconnectFilter;
import org.springframework.social.facebook.api.Facebook;
import org.springframework.social.facebook.connect.FacebookConnectionFactory;
import org.springframework.social.facebook.web.DisconnectController;
import org.springframework.social.fivepx.connect.FivepxConnectionFactory;
import org.springframework.social.fivepx.api.Fivepx; 
import org.springframework.social.flickr.api.Flickr;
import org.springframework.social.flickr.connect.FlickrConnectionFactory;

import com.brizius.myapp.facebook.EnsureUniqueConnectInterceptor;

@Configuration
@EnableSocial
@EnableAsync
@PropertySource("classpath:application.properties")
public class SocialConfig extends SocialConfigurerAdapter {

	@Autowired
	private Environment env;
	
	@Inject
	private DataSource dataSource;

	@Inject
	private UsersConnectionRepository usersConnectionRepository;
	
	//@Autowired
	//private TextEncryptor textEncryptor;
	
	protected static final String PROPERTY_NAME_SECURITY_ENCRYPT_PASSWORD = "security.encryptPassword";
	protected static final String PROPERTY_NAME_SECURITY_ENCRYPT_SALT="security.encryptSalt";
	
	@Override
	public void addConnectionFactories(ConnectionFactoryConfigurer cfConfig, Environment env) {
		cfConfig.addConnectionFactory(new FacebookConnectionFactory(env.getProperty("facebook.appKey"), env.getProperty("facebook.appSecret")));
		cfConfig.addConnectionFactory(new FivepxConnectionFactory(env.getProperty("fivepx.appKey"), env.getProperty("fivepx.appSecret")));
		cfConfig.addConnectionFactory(new FlickrConnectionFactory(env.getProperty("flickr.appKey"), env.getProperty("flickr.appSecret")));

	}
	
	@Override
	public UserIdSource getUserIdSource() {
		return new UserIdSource() {			
			@Override
			public String getUserId() {
				Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
				if (authentication == null) {
					throw new IllegalStateException("Unable to get a ConnectionRepository: no user signed in");
				}
				return authentication.getName();
			}
		};
	}
	
	
	@Override
	public UsersConnectionRepository getUsersConnectionRepository(ConnectionFactoryLocator connectionFactoryLocator) {
		//return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator, Encryptors.noOpText());
		UsersConnectionRepository repository = new JdbcUsersConnectionRepository(dataSource, 
				connectionFactoryLocator,
				Encryptors.noOpText());
				//Encryptors.text("password", "39783e315e6a207e733d6f4141"));
				//Encryptors.text(env.getProperty(PROPERTY_NAME_SECURITY_ENCRYPT_PASSWORD), KeyGenerators.string().generateKey())); //random 8byte salt
				//Encryptors.queryableText(env.getProperty(PROPERTY_NAME_SECURITY_ENCRYPT_PASSWORD), KeyGenerators.string().generateKey())); //random 8byte salt
				//Encryptors.queryableText(env.getProperty(PROPERTY_NAME_SECURITY_ENCRYPT_PASSWORD), env.getProperty(PROPERTY_NAME_SECURITY_ENCRYPT_SALT))); 	
				//Encryptors.text(env.getProperty(PROPERTY_NAME_SECURITY_ENCRYPT_PASSWORD), env.getProperty(PROPERTY_NAME_SECURITY_ENCRYPT_SALT))); 

		//repository.setConnectionSignUp(new SimpleConnectionSignUp());

		
		return repository;
		//return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator, textEncryptor);

	}
	

	@Bean
	public ConnectController connectController(ConnectionFactoryLocator connectionFactoryLocator, ConnectionRepository connectionRepository) {
		ConnectController connectController = new ConnectController(connectionFactoryLocator, connectionRepository);
		connectController.addInterceptor(new EnsureUniqueConnectInterceptor(usersConnectionRepository, connectionRepository));

		return connectController;
	}
	 
	@Bean
	public DisconnectController disconnectController(UsersConnectionRepository usersConnectionRepository, Environment environment) {
		return new DisconnectController(usersConnectionRepository, environment.getProperty("facebook.appSecret"));
	}

	@Bean
	public ReconnectFilter apiExceptionHandler(UsersConnectionRepository usersConnectionRepository, UserIdSource userIdSource) {
		return new ReconnectFilter(usersConnectionRepository, userIdSource);
	}

	@Bean
	@Scope(value="request", proxyMode=ScopedProxyMode.INTERFACES)
	public Facebook facebook(ConnectionRepository repository) {
		Connection<Facebook> connection = repository.findPrimaryConnection(Facebook.class);
		return connection != null ? connection.getApi() : null;
	}

	@Bean
	@Scope(value="request", proxyMode=ScopedProxyMode.INTERFACES)
	public Fivepx fivepx(ConnectionRepository repository) {
		Connection<Fivepx> connection = repository.findPrimaryConnection(Fivepx.class);
		return connection != null ? connection.getApi() : null;
	}
	
	@Bean
	@Scope(value="request", proxyMode=ScopedProxyMode.INTERFACES)
	public Flickr flickr(ConnectionRepository repository) {
		Connection<Flickr> connection = repository.findPrimaryConnection(Flickr.class);
		return connection != null ? connection.getApi() : null;
	}

}
